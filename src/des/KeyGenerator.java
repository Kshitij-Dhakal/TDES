package des;

import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.Random;

public class KeyGenerator {
    /*
     * public static void main(String[] args) { String key = getRandomKey();
     * System.out.println(key); // System.out.println(Integer.toBinaryString(127));
     * }
     */

    public static String getRandomKey() {
        String key = "";
        for (int i = 0; i < 8; i++) {
            Random rand = new Random();
            String temp = String.format("%7s", Integer.toBinaryString(rand.nextInt(128))).replace(' ', '0');
            int count = 0;
            for (int j = 0; j < temp.length(); j++) {
                if (temp.charAt(j) == '1') {
                    count++;
                }
            }
            if (count % 2 == 0) {
                key += temp + "1 ";
            } else {
                key += temp + "0 ";
            }
        }
        return key;
    }

    public static String[] generateBinaryKey(BigInteger integer) {
        String key = "";
        if (integer.bitLength() <= 112) {
            String temp = String.format("%112s", integer.toString(2)).replace(' ', '0');
            int count = (temp.charAt(0) == '1') ? 1 : 0;
            key += temp.charAt(0);
            for (int i = 1; i < temp.length(); i++) {
                key += temp.charAt(i);
                if (temp.charAt(i) == '1') {
                    count++;
                }
                if ((i + 1) % 7 == 0) {
                    if (count % 2 == 0) {
                        key += "1";
                    } else {
                        key += "0";
                    }
//                    key += " ";
                    count = 0;
                }
            }
        }
//        System.out.println(key);
        return new String[]{key.substring(0, 64), key.substring(64, 128)};
    }

    public static void main(String[] args) {
        int bitLength = 512;
        BigInteger p = BigInteger.probablePrime(bitLength, new SecureRandom()); //prime number p
        BigInteger g = BigInteger.probablePrime(bitLength, new SecureRandom()); //root prime of p (any other prime number is root prime of another prime)
        int Xa = (new Random()).nextInt(1000); //private number generated by a
        int Xb = (new Random()).nextInt(1000); //private number generated by b
        BigInteger Pa = g.pow(Xa).mod(p); //Pa = g^Xa mod p
        BigInteger Pb = g.pow(Xb).mod(p); //Pb = g^Xb mod p
        System.out.println("Public key of a : " + Pa);
        System.out.println("Public key of a : " + Pb);

        System.out.println("Key obtained by a : " + Pb.pow(Xa).mod(p)); //Ka = Pb^Xa mod p
        System.out.println("Key obtained by b : " + Pa.pow(Xb).mod(p)); //Kb = Pa^Xb mod p
        BigInteger keyLength = new BigInteger("2");
        keyLength = keyLength.pow(112); //(2^128)-1
        System.out.println(keyLength);
        System.out.println("Key mod 128 bits : " + Pb.pow(Xa).mod(p).mod(keyLength)); // K = Ka mod (2^128)
        System.out.println("Key mod 128 bits : " + Pa.pow(Xb).mod(p).mod(keyLength)); // K = Kb mod (2^128)
        //2^128 because TDES uses 128 bit key
        for (String s : generateBinaryKey(Pb.pow(Xa).mod(p).mod(keyLength))) {
            System.out.println(s);
        }

    }
}
